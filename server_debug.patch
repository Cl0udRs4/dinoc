--- src/server/server.c
+++ src/server/server.c.new
@@ -200,6 +200,7 @@ status_t server_start(void) {
     }
     
     LOG_INFO("Starting server");
+    fprintf(stderr, "Starting server\n");
     
     // Initialize protocol manager
     status = protocol_manager_init();
@@ -208,6 +209,7 @@ status_t server_start(void) {
     }
     
     LOG_INFO("Protocol manager initialized successfully");
+    fprintf(stderr, "Protocol manager initialized successfully\n");
     
     // Create protocol listeners
     if (global_config.enable_tcp) {
@@ -217,6 +219,7 @@ status_t server_start(void) {
         config.port = global_config.tcp_port;
         
         LOG_INFO("Creating TCP listener on %s:%d", config.bind_address, config.port);
+        fprintf(stderr, "Creating TCP listener on %s:%d\n", config.bind_address, config.port);
         
         status = protocol_manager_create_listener(PROTOCOL_TYPE_TCP, &config, &listener);
         if (status != STATUS_SUCCESS) {
@@ -224,6 +227,7 @@ status_t server_start(void) {
         }
         
         LOG_INFO("TCP listener created successfully");
+        fprintf(stderr, "TCP listener created successfully\n");
         
         // Start listener
         status = protocol_manager_start_listener(listener);
@@ -232,6 +236,7 @@ status_t server_start(void) {
         }
         
         LOG_INFO("TCP listener started successfully");
+        fprintf(stderr, "TCP listener started successfully\n");
     }
     
     if (global_config.enable_udp) {
@@ -241,6 +246,7 @@ status_t server_start(void) {
         config.port = global_config.udp_port;
         
         LOG_INFO("Creating UDP listener on %s:%d", config.bind_address, config.port);
+        fprintf(stderr, "Creating UDP listener on %s:%d\n", config.bind_address, config.port);
         
         status = protocol_manager_create_listener(PROTOCOL_TYPE_UDP, &config, &listener);
         if (status != STATUS_SUCCESS) {
@@ -248,6 +254,7 @@ status_t server_start(void) {
         }
         
         LOG_INFO("UDP listener created successfully");
+        fprintf(stderr, "UDP listener created successfully\n");
         
         // Start listener
         status = protocol_manager_start_listener(listener);
@@ -256,6 +263,7 @@ status_t server_start(void) {
         }
         
         LOG_INFO("UDP listener started successfully");
+        fprintf(stderr, "UDP listener started successfully\n");
     }
     
     if (global_config.enable_ws) {
@@ -265,6 +273,7 @@ status_t server_start(void) {
         config.port = global_config.ws_port;
         
         LOG_INFO("Creating WebSocket listener on %s:%d", config.bind_address, config.port);
+        fprintf(stderr, "Creating WebSocket listener on %s:%d\n", config.bind_address, config.port);
         
         status = protocol_manager_create_listener(PROTOCOL_TYPE_WS, &config, &listener);
         if (status != STATUS_SUCCESS) {
@@ -272,6 +281,7 @@ status_t server_start(void) {
         }
         
         LOG_INFO("WebSocket listener created successfully");
+        fprintf(stderr, "WebSocket listener created successfully\n");
         
         // Start listener
         status = protocol_manager_start_listener(listener);
@@ -280,6 +290,7 @@ status_t server_start(void) {
         }
         
         LOG_INFO("WebSocket listener started successfully");
+        fprintf(stderr, "WebSocket listener started successfully\n");
     }
     
     if (global_config.enable_dns) {
@@ -289,6 +300,7 @@ status_t server_start(void) {
         config.port = global_config.dns_port;
         
         LOG_INFO("Creating DNS listener on %s:%d", config.bind_address, config.port);
+        fprintf(stderr, "Creating DNS listener on %s:%d\n", config.bind_address, config.port);
         
         status = protocol_manager_create_listener(PROTOCOL_TYPE_DNS, &config, &listener);
         if (status != STATUS_SUCCESS) {
@@ -296,6 +308,7 @@ status_t server_start(void) {
         }
         
         LOG_INFO("DNS listener created successfully");
+        fprintf(stderr, "DNS listener created successfully\n");
         
         // Start listener
         status = protocol_manager_start_listener(listener);
@@ -304,6 +317,7 @@ status_t server_start(void) {
         }
         
         LOG_INFO("DNS listener started successfully");
+        fprintf(stderr, "DNS listener started successfully\n");
     }
     
     if (global_config.enable_icmp) {
@@ -313,6 +327,7 @@ status_t server_start(void) {
         config.pcap_device = global_config.pcap_device;
         
         LOG_INFO("Creating ICMP listener on device %s", config.pcap_device);
+        fprintf(stderr, "Creating ICMP listener on device %s\n", config.pcap_device);
         
         status = protocol_manager_create_listener(PROTOCOL_TYPE_ICMP, &config, &listener);
         if (status != STATUS_SUCCESS) {
@@ -320,6 +335,7 @@ status_t server_start(void) {
         }
         
         LOG_INFO("ICMP listener created successfully");
+        fprintf(stderr, "ICMP listener created successfully\n");
         
         // Start listener
         status = protocol_manager_start_listener(listener);
@@ -328,6 +344,7 @@ status_t server_start(void) {
         }
         
         LOG_INFO("ICMP listener started successfully");
+        fprintf(stderr, "ICMP listener started successfully\n");
     }
     
     // Start HTTP API server
@@ -336,6 +353,7 @@ status_t server_start(void) {
         status = http_server_start(global_config.bind_address, global_config.http_api_port);
         if (status != STATUS_SUCCESS) {
             LOG_ERROR("Failed to start HTTP API server");
+            fprintf(stderr, "Failed to start HTTP API server\n");
             return status;
         }
         
@@ -346,6 +364,7 @@ status_t server_start(void) {
     if (global_config.enable_console) {
         status = console_init();
         if (status != STATUS_SUCCESS) {
+            fprintf(stderr, "Failed to initialize console\n");
             LOG_ERROR("Failed to initialize console");
             return status;
         }
@@ -353,11 +372,13 @@ status_t server_start(void) {
         status = console_start();
         if (status != STATUS_SUCCESS) {
             LOG_ERROR("Failed to start console");
+            fprintf(stderr, "Failed to start console\n");
             return status;
         }
     }
     
     LOG_INFO("Server started successfully");
+    fprintf(stderr, "Server started successfully\n");
     
     return STATUS_SUCCESS;
 }
